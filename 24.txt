1 Write C program which takes a filename as command line argument and displays all its
characteristics as shown by ls â€“l. (File type, permissions, owner name, number of links, file
size, file modification time, inode number and name of the file)

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <pwd.h>
#include <time.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("No cm line...");
        return 1;
    }

    struct stat s;
    if (stat(argv[1], &s) < 0) {
        printf("Error: Unable to get file information.\n");
        return 1;
    }

    // File type
    printf("File Type: ");
    if (S_ISREG(s.st_mode))
        printf("Regular file\n");
    else if (S_ISDIR(s.st_mode))
        printf("Directory\n");
    else if (S_ISLNK(s.st_mode))
        printf("Symbolic link\n");
    else if (S_ISFIFO(s.st_mode))
        printf("FIFO/pipe\n");
    else if (S_ISCHR(s.st_mode))
        printf("Character device\n");
    else if (S_ISBLK(s.st_mode))
        printf("Block device\n");
    else if (S_ISSOCK(s.st_mode))
        printf("Socket\n");
    else
        printf("Unknown\n");

    // Permissions
    printf("Permissions: ");
    printf((s.st_mode & S_IRUSR) ? "r" : "-");
    printf((s.st_mode & S_IWUSR) ? "w" : "-");
    printf((s.st_mode & S_IXUSR) ? "x" : "-");
    printf((s.st_mode & S_IRGRP) ? "r" : "-");
    printf((s.st_mode & S_IWGRP) ? "w" : "-");
    printf((s.st_mode & S_IXGRP) ? "x" : "-");
    printf((s.st_mode & S_IROTH) ? "r" : "-");
    printf((s.st_mode & S_IWOTH) ? "w" : "-");
    printf((s.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n");

    // Owner name
    struct passwd *pw = getpwuid(s.st_uid);
    if (pw != NULL)
        printf("Owner: %s\n", pw->pw_name);

    // Number of links
    printf("Number of Links: %lu\n", (unsigned long) s.st_nlink);

    // File size
    printf("File Size: %ld bytes\n", s.st_size);

    // File modification time
    char timeStr[20];
    strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", localtime(&(s.st_mtime)));
--------------------------------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    struct stat s;
    if (stat(argv[1], &s) == -1) {
        perror("stat");
        return 1;
    }

    // File type
    printf("File type: ");
    switch (s.st_mode & S_IFMT) {
        case S_IFBLK:  printf("block device\n");            break;
        case S_IFCHR:  printf("character device\n");        break;
        case S_IFDIR:  printf("directory\n");               break;
        case S_IFIFO:  printf("FIFO/pipe\n");               break;
        case S_IFLNK:  printf("symlink\n");                 break;
        case S_IFREG:  printf("regular file\n");            break;
        case S_IFSOCK: printf("socket\n");                  break;
        default:       printf("unknown\n");                 break;
    }

    // Permissions
    printf("Permissions: ");
    printf((s.st_mode & S_IRUSR) ? "r" : "-");
    printf((s.st_mode & S_IWUSR) ? "w" : "-");
    printf((s.st_mode & S_IXUSR) ? "x" : "-");
    printf((s.st_mode & S_IRGRP) ? "r" : "-");
    printf((s.st_mode & S_IWGRP) ? "w" : "-");
    printf((s.st_mode & S_IXGRP) ? "x" : "-");
    printf((s.st_mode & S_IROTH) ? "r" : "-");
    printf((s.st_mode & S_IWOTH) ? "w" : "-");
    printf((s.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n");

    // Owner name
    struct passwd *pw = getpwuid(s.st_uid);
    printf("Owner: %s\n", pw->pw_name);

    // Number of links
    printf("Number of links: %lu\n", s.st_nlink);

    // File size
    printf("File size: %lld bytes\n", s.st_size);

    // File modification time
    printf("Last modified: %s", ctime(&s.st_mtime));

    // Inode number
    printf("Inode number: %lu\n", s.st_ino);

    // Filename
    printf("Filename: %s\n", argv[1]);

    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
