#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    ssize_t numBytes;
    char buffer[100];

    // Open a file for writing
    fd = open("file.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("open");
        exit(1);
    }

    // Write data to the file
    write(fd, "This is some data.", 18);

    // Create a hole in the file
    lseek(fd, 10, SEEK_CUR);

    // Write more data to the file
    write(fd, "This is more data.", 18);

    // Create another hole in the file
    lseek(fd, 10, SEEK_CUR);

    // Close the file
    close(fd);

    // Open the file for reading
    fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        exit(1);
    }

    // Read and display the file contents
    while ((numBytes = read(fd, buffer, sizeof(buffer))) > 0) {
        write(STDOUT_FILENO, buffer, numBytes);
    }

    // Close the file
    close(fd);

    return 0;
}





In this program, we first open a file named "file.txt" for writing using the open() system call. We then write some data to the file using the write() system call.

Next, we create a hole in the file by moving the file offset using the lseek() system call with a relative offset of 10. This creates a hole of size 10 bytes in the file.

After creating the first hole, we write more data to the file.

Then, we create another hole in the file by again moving the file offset using lseek() with a relative offset of 10.

We close the file and open it again, this time for reading. We use the read() system call to read the file contents into a buffer, and then use write() to display the contents on the standard output.

Finally, we close the file.

You can compile and run the program to create the holes in the file and read the contents. The program will display the data written before and after the holes, with the holes appearing as gaps in the output.






