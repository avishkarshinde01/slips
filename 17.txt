#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    pid_t child_pid;
    char message[] = "Hello, child!";

    // Create the pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(1);
    }

    // Fork the child process
    child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(1);
    } else if (child_pid == 0) {
        // Child process
        char buffer[100];

        // Close the write end of the pipe
        close(pipefd[1]);

        // Read the message from the parent
        ssize_t numBytes = read(pipefd[0], buffer, sizeof(buffer));
        if (numBytes > 0) {
            printf("Child received message: %s\n", buffer);
        }

        // Close the read end of the pipe
        close(pipefd[0]);

        exit(0);
    } else {
        // Parent process

        // Close the read end of the pipe
        close(pipefd[0]);

        // Write a message to the child
        write(pipefd[1], message, sizeof(message));

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child to finish
        wait(NULL);

        exit(0);
    }

    return 0;
}



In this program, we create an unnamed pipe using the pipe() system call. The pipe has two ends: pipefd[0] for reading and pipefd[1] for writing.

We then fork a child process. In the child process, we close the write end of the pipe (pipefd[1]) since it won't be used for writing in the child process. We then read from the read end of the pipe (pipefd[0]) into a buffer using the read() system call. If there are bytes read, we print the message received from the parent.

In the parent process, we close the read end of the pipe (pipefd[0]) since it won't be used for reading in the parent process. We then write a message to the write end of the pipe (pipefd[1]) using the write() system call.

After writing the message, we close the write end of the pipe and wait for the child process to finish using the wait() system call.

You can compile and run the program to see the parent and child processes communicate through the unnamed pipe.






