#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <command>\n", argv[0]);
        return 1;
    }

    pid_t child_pid = fork();

    if (child_pid == -1) {
        printf("Failed to create child process.\n");
        return 1;
    } else if (child_pid == 0) {
        // Child process
        execvp(argv[1], &argv[1]);
        printf("Failed to execute the command.\n");
        exit(1);
    } else {
        // Parent process
        int status;
        waitpid(child_pid, &status, 0);

        printf("Child process PID: %d\n", child_pid);
        printf("Child exit status: %d\n", WEXITSTATUS(status));
        printf("Parent process PID: %d\n", getpid());
    }

    return 0;
}


In this program, we use the fork system call to create a child process. In the child process, we use the execvp function to execute the command specified as the command-line argument. The execvp function replaces the child process with the specified program.

In the parent process, we use waitpid to wait for the child process to complete its execution. The waitpid function suspends the parent process until the child process exits. We then print the child process's PID and exit status using the WEXITSTATUS macro, which extracts the exit status from the status variable returned by waitpid. Finally, we print the parent process's PID using getpid.