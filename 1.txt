 Write a C program to implement the following unix/linux command (use fork, pipe
and execsystem call).

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    int ls_pid, wc_pid;

    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    ls_pid = fork();
    if (ls_pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (ls_pid == 0) {
        // Child process for executing ls -l
        close(pipefd[0]);  // Close the unused read end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);  // Redirect stdout to the write end of the pipe
        execlp("ls", "ls", "-l", NULL);  // Execute ls -l
        perror("Exec failed");
        return 1;
    }

    wc_pid = fork();
    if (wc_pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (wc_pid == 0) {
        // Child process for executing wc -l
        close(pipefd[1]);  // Close the unused write end of the pipe
        dup2(pipefd[0], STDIN_FILENO);  // Redirect stdin to the read end of the pipe
        execlp("wc", "wc", "-l", NULL);  // Execute wc -l
        perror("Exec failed");
        return 1;
    }

    close(pipefd[0]);  // Close the read end of the pipe
    close(pipefd[1]);  // Close the write end of the pipe

    // Wait for the child processes to finish
    wait(NULL);
    wait(NULL);

    return 0;
}


The provided code implements the ls -l | wc -l command using fork, pipe, and exec system calls. The expected output of this program will be the number of files and directories present in the current directory.

Here's an example of the expected output:


5
This output indicates that there are five files or directories in the current directory. The exact number may vary depending on the contents of your directory.


-------------------------------------------------------------------------------------------------------------------

